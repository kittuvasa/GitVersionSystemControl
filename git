Right on! While diff is the command that generates the difference between two files,
patch is the command that applies those differences to the original file.

diff
diff is used to find differences between two files. On its own, itâ€™s a bit hard to use; instead, use it with diff -u to find lines which differ in two files

diff -u
diff -u is used to compare two files, line by line, and have the differing lines compared side-by-side in the same output. 

Patch
Patch is useful for applying file differences. See the below example, which compares two files.
The comparison is saved as a .diff file, which is then patched to the original file!

Spot on! By keeping track of the changes that we make to our files, a VCS lets us know when a file changed, who changed it,
and also lets us easily roll back those changes.



 The git directory acts as a database for all the changes tracked in Git and 
 the working tree acts as a sandbox where we can edit the current versions of the files.
 
 After modifying a file, we need to stage those changes and then commit them afterwards.
 
 ///lab assessment
 Introduction to Git
 *Install Git
 The git init command creates a new Git repository. In our case, it transformed the current directory into a Git repository. 
 It can also be used to convert an existing, unversioned project to a Git repository or to initialize a new, empty repository.
 
 Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. 
 This metadata includes subdirectories for objects, refs, and template files. A HEAD file is also created which points to the currently checked out commit.
 
 If you've already run git init on a project directory containing a .git subdirectory, you can safely run git init again on the same project directory. 
 The operation is what we call idempotent; running it again doesn't override an existing .git configuration.
 
 *config git
 Git uses a username to associate commits with an identity. It does this by using the git config command. To set Git username use the following command:
 git config --global user.name "Name"
 
 Replace Name with your name. Any future commits you push to GitHub from the command line will now be represented by this name.
 You can use git config to even change the name associated with your Git commits. 
 This will only affect future commits and won't change the name used for past commits.
 
 Let's set your email address to associate it with your Git commits.

git config --global user.email "user@example.com"

Replace user@example.com with your email-id. Any future commits you now push to GitHub
will be associated with this email address. You can even use git config to change the user email associated with your Git commits.

*Git Operations

et's now create a text file named README. We will be using the nano editor for this.

nano README
Copied!
Type any text within the file, or you can use the following text:

"This is my first repository."

You can now see the file you created, README, under the section Untracked files. 
Git isn't tracking the files yet. To track the files, we have to commit these files by adding them to the staging area.

git add README

This command adds changes from the working tree to the staging area i.e., it gathers and prepares files for Git before committing them.
In other words, it updates the index with the current content found in the working tree to prepare the content that's staged for the next commit.

However, git add doesn't affect the repository in any serious way because changes are not actually recorded until you commit them.

Commit the changes using the following command:

git commit

This now opens an editor, asking you to type a commit message. Every commit has an associated commit message.
A commit message is a log message from the user describing the changes.

Enter the commit message of your choice or you can use the following text:

This is my first commit!

The git commit command captures a snapshot of the project's currently staged changes i.e.,
it stores the current contents of the index in a new commit along with the commit message.

Git tracks the changes and displays that the file has been modified. You can view the changes made to file using the following command:

git diff README

git commit -m "This is my second commit."

The command git commit with -m flag takes the commit message, too. This is different to the command without flag,
where you had to type the commit message within the editor.
If multiple -m flags are given to the command, it concatenates the values as separate paragraphs.

To view all the commits use the following command:

git log

Git log command shows the commit history of the repository. It shows all the commits on the repository represented by a unique commit ID at the top of each commit.
It also shows the author, date, and time and the commit message associated with the commits.

You also have various options to limit the output of this command. The output can be filtered based on the last number of commits, author, commit message, etc.
/////////////////////////////////////////////
Taking the commit ID, git show will show information about the commit and its associated patch.

Command

Explanation & Link

git commit -a

Stages files automatically

git log -p

Produces patch text

git show

Shows various objects

git diff

Is similar to the Linux `diff` command, and can show the differences in various commits

git diff --staged

An alias to --cached, this will show all staged files compared to the named commit

git add -p

Allows a user to interactively review patches to add to the current commit

git mv

Similar to the Linux `mv` command, this moves a file

git rm

Similar to the Linux `rm` command, this deletes, or removes a file

.gitignore files
.gitignore files are used to tell the git tool to intentionally ignore some files in a given Git repository.
For example, this can be useful for configuration files or metadata files that a user may not want to check into the master branch.

git checkout restores files to the latest stored snapshot, reverting any changes before staging.
 
 git commit --amend allows us to modify and add changes to the most recent commit. 
 
 With git revert HEAD, a new commit is created with inverse changes. 
 This cancels previous changes instead of making it as though the original commit never happened.
 
  the SHA1 hash numbers that Git uses to identify commits?
They provide the consistency that is critical for distributed systems such as Git.
They are created using the commit message, date, author, and the snapshot taken of the working tree.
They are composed of 40 characters.
Git can identify a commit using the first few hash numbers as long as there is only one matching possibility

The git show command without an object parameter specified  will default to show us information about the commit pointed to by the HEAD.
